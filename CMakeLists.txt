cmake_minimum_required(VERSION 3.0.0)

project(Argentum C)

execute_process(COMMAND date +%Y-%m-%d_%H%M OUTPUT_VARIABLE ARGENTUM_BUILD_DATE)
set(ARGENTUM_BUILD_DATE ${ARGENTUM_BUILD_DATE})
string(STRIP ${ARGENTUM_BUILD_DATE} ARGENTUM_BUILD_DATE)
message("Argentum Build Date ${ARGENTUM_BUILD_DATE}")

set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32 -nostdinc -nostartfiles -nostdlib")

add_definitions(-DARGENTUM_BUILD_DATE=\"${ARGENTUM_BUILD_DATE}\")

set(CMAKE_VERBOSE_MAKEFILE OFF)

# For code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set (ARGENTUM_BUILD_DOC OFF)

# Doxygen Docs
if (ARGENTUM_BUILD_DOC)
    find_package(Doxygen)
    if (DOXYGEN_FOUND)
        # set input and output files
        set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
        # request to configure the file
        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
        message("Doxygen build started")
        # note the option ALL which allows to build the docs together with the application
        add_custom_target( doc ALL
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen"
            VERBATIM )
    else (DOXYGEN_FOUND)
      message("Doxygen need to be installed to generate the doxygen documentation")
    endif (DOXYGEN_FOUND)
endif()

add_subdirectory("Core")
#add_subdirectory("Lua")
